library(cbbdata)
library(tidyverse)
library(glue)
library(poibin)
library(furrr)
library(gt)
library(gtExtras)
library(httr2)
library(rvest)

source('https://gist.github.com/andreweatherman/3874a59a1f7b4af97e3699e4ece94579/raw/09de6c8e8fe13f4f9d1078db456b64efd981232c/gt_theme_athletic.R')
schedule <- cbd_torvik_season_schedule(year=2024) |>
  mutate(type = replace_na(type, 'nc'))

# get archive ratings
archive_ratings <- cbd_torvik_ratings_archive(year=2024)

# get average ratings by day for top X teams
median_top_x <- function(cutoff, year) {

  archive_ratings |>
    filter(year == !!year) |>
    slice_min(rank, n = cutoff, by = date) |>
    summarize(
      median_adj_oe = median(adj_o),
      median_adj_de = median(adj_d),
      median_barthag = median(barthag),
      cutoff = cutoff,
      .by = date
    )

}

# function to adjust ratings based on home / away
adjust_efficiency <- function(df) {
  adjusted <- df %>%
    mutate(
      # off. ratings for team and AP average (NOT opponent)
      across(ends_with("oe") & !starts_with("opp"),
             ~ case_when(
               game_location == "home" ~ . * 1.014,
               game_location == "away" ~ . * 0.986,
               .default = . # no change for neutral
             )),
      # def. ratings for team and AP average (NOT opponent)
      across(ends_with("de") & !starts_with("opp"),
             ~ case_when(
               game_location == "home" ~ . * 0.986,
               game_location == "away" ~ . * 1.014,
               .default = .
             )),
      # off. ratings for opponent (game location is switched!)
      across(opp_adj_oe,
             ~ case_when(
               game_location == "home" ~ . * 0.986,
               game_location == "away" ~ . * 1.014,
               .default = .
             )),
      # def. ratings for opponent (game location is switched!)
      across(opp_adj_de,
             ~ case_when(
               game_location == "home" ~ . * 1.014,
               game_location == "away" ~ . * 0.986,
               .default = .
             ))
    )

  return(adjusted)
}

# get records for each team
team_records <- archive_ratings |>
  slice_max(date, n = 1, by = year) |>
  mutate(wins = parse_number(record),
         games = wins + as.numeric(gsub('.*-', '', record)),
         record = glue('{wins}-{games-wins}')) |>
  select(team, year, wins, games, record)

game_box <- cbbdata::cbd_torvik_game_box(year=2024) |>
  mutate(type = replace_na(type, 'nc'))

# parse schedule and add ratings
parse_schedule <- function(team, year, cutoff, schedule) {

  if (is.null(schedule)) {
    schedule <- get_season_schedule(year)
  }

  team_results <- game_box |> filter(team == !!team) |>
    select(date, result, type) |> mutate(result = ifelse(result == 'W',
                                                      1, 0))

  # get schedule
  data <- schedule |>
    filter((home == team | away == team) & year == !!year & date <= Sys.Date() - 1) |>
    select(date, neutral, home, away, game_id) |>
    mutate(
      year = year,
      team = team,
      opponent = if_else(home == team, away, home),
      avg_cutoff = cutoff,
      game_location = case_when(
        home == team & neutral == 0 ~ 'home',
        away == team & neutral == 0 ~ 'away',
        .default = 'neutral'
      )
    ) |>
    # join on team ratings
    left_join(archive_ratings |> select(team, adj_oe = adj_o, adj_de = adj_d, date), join_by('team', 'date')) |>
    # join on opponent ratings
    left_join(archive_ratings |> select(opponent = team, opp_adj_oe = adj_o, opp_adj_de = adj_d, date), join_by('opponent', 'date')) |>
    # join on average ratings for cutoff
    left_join(median_top_x(cutoff, year) |> select(date, median_adj_oe, median_adj_de), by = 'date') |>
    adjust_efficiency() |>
    mutate(
      team_pythag = (adj_oe^11.5) / (adj_oe^11.5 + adj_de^11.5),
      median_pythag = (median_adj_oe^11.5) / (median_adj_oe^11.5 + median_adj_de^11.5),
      opp_pythag = (opp_adj_oe^11.5) / (opp_adj_oe^11.5 + opp_adj_de^11.5),
      team_wp = (team_pythag - team_pythag * opp_pythag) / (team_pythag + opp_pythag - 2 * team_pythag * opp_pythag),
      median_wp = (median_pythag - median_pythag * opp_pythag) / (median_pythag + opp_pythag - 2 * median_pythag * opp_pythag),
      # force team and avg wp to be 100% if vs. non-d1 team
      team_wp = replace_na(team_wp, 1),
      median_wp = replace_na(median_wp, 1)
    ) |>
    left_join(team_results, by = 'date') |>
    mutate(exp_result = ifelse(median_wp > 0.5, 1, 0))

  best_win <- data |>
      filter(result == 1 & type != 'nond1') |>
      slice_min(median_wp) |>
      slice(1)

  best_win <- ifelse(
    nrow(best_win) == 0, 'No D-1 Wins',
    best_win |>
      mutate(loc = ifelse(game_location == 'away', '@', 'vs.'),
             to_paste = glue('{loc} {opponent} ({round(median_wp, 3) * 100}%)')) |>
      pull('to_paste')
  )


  data <- data |>
    select(date, team, opponent, game_location, team_wp, median_wp, avg_cutoff, result, exp_result) |>
    mutate(best_win = best_win)

  return(data)

}

compute_cumulative_probs <- function(win_probs) {
  n <- length(win_probs)
  cumulative_probs <- map_dbl(0:n, function(x) {
    1 - poibin::ppoibin(x - 1, pp = win_probs)
  })
  cumulative_probs <- round(cumulative_probs, 3)
  gc()
  return(tibble(
    wins_at_least = 0:n,
    cumulative_probability = cumulative_probs
  ))
}

# function for calc. % chance for >= all possible games
parse_wp <- function(team, year, cutoff, schedule) {

  team_wp <- parse_schedule(team, year, cutoff, schedule)
  best_win <- team_wp$best_win |> unique()

  median_wp <- team_wp$median_wp

  cumulative_prob <- compute_cumulative_probs(median_wp) %>%
    mutate(team = team, year = year, cutoff = cutoff, best_win = best_win) %>%
    left_join(team_records %>% select(team, year, wins, record), by = c('team', 'year'))

  gc()
  return(cumulative_prob)
}


# loop over all active t-25 teams
teams <- cbd_torvik_ratings(year=2024) |> pull('team')
results <- map_dfr(teams, \(team) parse_wp(team, 2024, 50, schedule),
                   .progress = 'Analyzing')


ap_top_25 <- tibble(
  team = c('Purdue', 'Kansas', 'Houston', 'Arizona', 'Connecticut', 'Marquette', 'Oklahoma', 'Tennessee',
           'Kentucky', 'Baylor', 'North Carolina', 'Creighton', 'Illinois', 'Florida Atlantic', 'Gonzaga',
           'Colorado St.', 'BYU', 'Clemson', 'Texas', 'James Madison', 'Duke', 'Virginia', 'Memphis',
           'Wisconsin', 'Mississippi'),
  ap_rank = 1:25
)

# last week rankings for ranking change col.
last_week <- tibble(
  team = c('Clemson', 'Arizona', 'Colorado St.', 'James Madison', 'Purdue', 'Princeton',
           'Houston', 'Baylor', 'Kansas', 'BYU', 'Marquette', 'Oklahoma', 'Gonzaga',
           'Creighton', 'South Carolina', 'San Diego St.', 'Mississippi', 'North Carolina',
           'Florida Atlantic', 'Nevada', 'Connecticut', 'Texas A&M', 'Virginia',
           'Northwestern', 'Memphis'),
  last_rank = 1:25
)

results |>
  left_join(ap_top_25, by = 'team') |>
  left_join(last_week, by = 'team') |>
  mutate(ap_rank = ifelse(is.na(ap_rank), '---', ap_rank)) |>
  filter(wins == wins_at_least) |>
  slice_min(cumulative_probability, n = 25) |>
  mutate(rank = row_number(),
         rank_change = last_rank - rank) |>
  # left_join(team_records |> select(team,year, record), by = c('year', 'team')) |>
  cbd_gt_logos(team) |>
  mutate(team = glue('{team_logo} ({record})'), team_logo = NULL) |>
  gt(id='team') |>
  #gt_theme_athletic() |>
  gt_theme_538() |>
  cols_move_to_start(team) |>
  cols_move_to_start(rank) |>
  cols_move_to_end(cumulative_probability) |>
  fmt_markdown(team) |>
  cols_hide(c(year, wins_at_least, cutoff, wins, record, last_rank)) |>
  fmt_percent(cumulative_probability) |>
  cols_align(columns = everything(), 'center') |>
  cols_align(columns = c(team, best_win), 'left') |>
  gt_fa_rank_change(rank_change, font_color = "match") |>
  cols_label(
    cumulative_probability = 'Prob. %',
    ap_rank = 'AP Rank',
    best_win = 'Best Win',
    rank_change = 'Last'
  ) |>
  opt_row_striping() |>
  tab_style(cells_body(columns = team), style = cell_text(weight = 'bold')) |>
  gt_color_rows(cumulative_probability, domain = 0:1,
                palette = 'ggsci::blue_material',
                direction = -1) |>
  gt::tab_options(
    heading.title.font.size = 24,
    table.font.size = 14,
    heading.subtitle.font.size = 14,
    source_notes.font.size = 12,
  ) |>
  # gt::tab_style(
  #   locations = gt::cells_column_labels(
  #     columns = gt::everything()
  #   ),
  #   style = gt::cell_text(
  #     font = gt::google_font('Work Sans'),
  #     weight = 650,
  #     size = px(14),
  #     transform = 'uppercase'
  #   )
  # ) |>
  gt_add_divider(cumulative_probability, sides = 'right', color='black', include_labels = FALSE) |>
  gt_add_divider(rank, sides = 'left', color='black', include_labels = FALSE) |>
  # tab_style(style = cell_borders(sides = 'bottom', color = 'black',
  #                                weight = '2px'),
  #           location = cells_body(columns = everything(), rows = 25)) |>
  tab_header(
    title = 'Record Achievement Rankings',
    subtitle = md("The probability that the average top 50 team would win as many or more games<br>against a team's schedule. 'Best Win' is the lowest average top 50 team win%.")
  ) |>
  tab_source_note(
    source_note = md('Viz. + Analysis by @andreweatherman (Dec. 4, 2023)<br>Inspired by @KFordRatings')
  ) |>
  opt_css(
    css = "
      #team .gt_heading {
       padding-bottom: 0px;
       padding-top: 6px
      }
      #team .gt_subtitle {
       padding-top: 2px;
       padding-bottom: 6px;
      }
     "
  ) |>
  gtsave_extra('record_achievment_03.png')



### CONSENSUS RANKING TABLE
clean_em <- function(data) {

  # pass in raw EM data
  data <- data |>
    select(c(1:2, 5)) |>
    setNames(c('rank', 'team', 'bpr')) |>
    mutate(team = gsub('State', 'St.', team),
           team = gsub('&amp;', "&", team),
           team = gsub('-', ' ', team),
           team = case_when(
             team == "Saint John's" ~ "St. John's",
             team == "Miami (Fla.)" ~ "Miami FL",
             team == "NC St." ~ "North Carolina St.",
             team == "Ole Miss" ~ "Mississippi",
             team == "Saint Bonaventure" ~ "St. Bonaventure",
             team == "Saint Thomas (Minn.)" ~ "St. Thomas",
             team == "California Baptist" ~ "Cal Baptist",
             team == "Southern Mississippi" ~ "Southern Miss",
             team == "Florida International" ~ "FIU",
             team == "Prairie View" ~ "Prairie View A&M",
             team == "Missouri Kansas City" ~ "UMKC",
             team == "Miami (Ohio)" ~ "Miami OH",
             team == "South Carolina Upstate" ~ "USC Upstate",
             team == "Omaha" ~ "Nebraska Omaha",
             team == "Arkansas Little Rock" ~ "Little Rock",
             team == "Texas A&M Corpus Christi" ~ "Texas A&M Corpus Chris",
             team == "Texas Rio Grande Valley" ~ "UT Rio Grande Valley",
             team == "Loyola Maryland" ~ "Loyola MD",
             team == "Grambling" ~ "Grambling St.",
             team == "Saint Francis (PA)" ~ "St. Francis PA",
             team == "Long Island" ~ "LIU Brooklyn",
             .default = team
           ))

  return(data)


}
get_em <- function(url, nonce) {

  require(httr)

  headers = c(
    `authority` = "evanmiya.com",
    `accept` = "application/json, text/javascript, */*; q=0.01",
    `accept-language` = "en-US,en;q=0.9,lb;q=0.8",
    `content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
    `origin` = "https://evanmiya.com",
    `referer` = "https://evanmiya.com/",
    `sec-ch-ua` = '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
    `sec-ch-ua-mobile` = "?0",
    `sec-ch-ua-platform` = '"Windows"',
    `sec-fetch-dest` = "empty",
    `sec-fetch-mode` = "cors",
    `sec-fetch-site` = "same-origin",
    `user-agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    `x-requested-with` = "XMLHttpRequest"
  )

  params = list(
    `w` = "",
    `nonce` = nonce
  )

  data = list(
    `draw` = "1",
    `columns[0][data]` = "0",
    `columns[0][name]` = "",
    `columns[0][searchable]` = "true",
    `columns[0][orderable]` = "true",
    `columns[0][search][value]` = "",
    `columns[0][search][regex]` = "false",
    `columns[1][data]` = "1",
    `columns[1][name]` = "",
    `columns[1][searchable]` = "true",
    `columns[1][orderable]` = "true",
    `columns[1][search][value]` = "",
    `columns[1][search][regex]` = "false",
    `columns[2][data]` = "2",
    `columns[2][name]` = "",
    `columns[2][searchable]` = "true",
    `columns[2][orderable]` = "true",
    `columns[2][search][value]` = "",
    `columns[2][search][regex]` = "false",
    `columns[3][data]` = "3",
    `columns[3][name]` = "",
    `columns[3][searchable]` = "true",
    `columns[3][orderable]` = "true",
    `columns[3][search][value]` = "",
    `columns[3][search][regex]` = "false",
    `columns[4][data]` = "4",
    `columns[4][name]` = "",
    `columns[4][searchable]` = "true",
    `columns[4][orderable]` = "true",
    `columns[4][search][value]` = "",
    `columns[4][search][regex]` = "false",
    `columns[5][data]` = "5",
    `columns[5][name]` = "",
    `columns[5][searchable]` = "true",
    `columns[5][orderable]` = "true",
    `columns[5][search][value]` = "",
    `columns[5][search][regex]` = "false",
    `columns[6][data]` = "6",
    `columns[6][name]` = "",
    `columns[6][searchable]` = "true",
    `columns[6][orderable]` = "true",
    `columns[6][search][value]` = "",
    `columns[6][search][regex]` = "false",
    `columns[7][data]` = "7",
    `columns[7][name]` = "",
    `columns[7][searchable]` = "true",
    `columns[7][orderable]` = "true",
    `columns[7][search][value]` = "",
    `columns[7][search][regex]` = "false",
    `columns[8][data]` = "8",
    `columns[8][name]` = "",
    `columns[8][searchable]` = "true",
    `columns[8][orderable]` = "true",
    `columns[8][search][value]` = "",
    `columns[8][search][regex]` = "false",
    `columns[9][data]` = "9",
    `columns[9][name]` = "",
    `columns[9][searchable]` = "true",
    `columns[9][orderable]` = "true",
    `columns[9][search][value]` = "",
    `columns[9][search][regex]` = "false",
    `columns[10][data]` = "10",
    `columns[10][name]` = "",
    `columns[10][searchable]` = "true",
    `columns[10][orderable]` = "true",
    `columns[10][search][value]` = "",
    `columns[10][search][regex]` = "false",
    `columns[11][data]` = "11",
    `columns[11][name]` = "",
    `columns[11][searchable]` = "true",
    `columns[11][orderable]` = "true",
    `columns[11][search][value]` = "",
    `columns[11][search][regex]` = "false",
    `columns[12][data]` = "12",
    `columns[12][name]` = "",
    `columns[12][searchable]` = "true",
    `columns[12][orderable]` = "true",
    `columns[12][search][value]` = "",
    `columns[12][search][regex]` = "false",
    `columns[13][data]` = "13",
    `columns[13][name]` = "",
    `columns[13][searchable]` = "true",
    `columns[13][orderable]` = "true",
    `columns[13][search][value]` = "",
    `columns[13][search][regex]` = "false",
    `columns[14][data]` = "14",
    `columns[14][name]` = "",
    `columns[14][searchable]` = "true",
    `columns[14][orderable]` = "true",
    `columns[14][search][value]` = "",
    `columns[14][search][regex]` = "false",
    `columns[15][data]` = "15",
    `columns[15][name]` = "",
    `columns[15][searchable]` = "true",
    `columns[15][orderable]` = "true",
    `columns[15][search][value]` = "",
    `columns[15][search][regex]` = "false",
    `columns[16][data]` = "16",
    `columns[16][name]` = "",
    `columns[16][searchable]` = "true",
    `columns[16][orderable]` = "true",
    `columns[16][search][value]` = "",
    `columns[16][search][regex]` = "false",
    `columns[17][data]` = "17",
    `columns[17][name]` = "",
    `columns[17][searchable]` = "true",
    `columns[17][orderable]` = "true",
    `columns[17][search][value]` = "",
    `columns[17][search][regex]` = "false",
    `columns[18][data]` = "18",
    `columns[18][name]` = "",
    `columns[18][searchable]` = "true",
    `columns[18][orderable]` = "true",
    `columns[18][search][value]` = "",
    `columns[18][search][regex]` = "false",
    `order[0][column]` = "4",
    `order[0][dir]` = "desc",
    `start` = "0",
    `length` = "400",
    `search[value]` = "",
    `search[regex]` = "false",
    `search[caseInsensitive]` = "true",
    `search[smart]` = "true",
    `escape` = "true"
  )

  res <- httr::POST(url = url, httr::add_headers(.headers=headers), query = params, body = data, encode = "form")

  data <- content(res) |> pluck('data') |> data.table::rbindlist()

  data <- clean_em(data)

  return(data)

}
get_hals <- function() {

  # get name matches
  hals_matches <- read_csv('/Users/andrewweatherman/Desktop/hals_match.csv') |>
    mutate(torvik = gsub('\xca', ' ', torvik))

  doc <- request('https://www.haslametrics.com/ratings.xml?z=0.7024152791448821') |>
    req_perform() |>
    resp_body_xml() |>
    XML::xmlParse()

  xml_list <- XML::xmlToList(doc)

  all <- map_dfr(1:362, ~ xml_list[.x]$mr)

  all <- all |> mutate(t = str_replace(t, 'State', 'St.')) |>
    select(team = t, hals_rk = rk) |>
    left_join(hals_matches) |>
    mutate(team = ifelse(is.na(torvik), team, torvik),
           torvik = NULL,
           hals_rk = as.numeric(hals_rk))

  return(all)

}

get_rankings <- function(url, nonce) {

  cur_resume <- cbd_torvik_current_resume()

  # eff. metrics
  kp <- cbd_kenpom_ratings(year = 2024) |> select(team, kp_rk = rk, record = w_l)
  torvik <- cbd_torvik_ratings(year = 2024) |> select(team, torvik_rk = barthag_rk)
  net <- cur_resume |> select(team, net_rk = net, q1_record = quad1)
  em <- get_em(url, nonce) |> select(em_rk = rank, team)
  hals <- get_hals()

  # resume metrics
  wab <- cur_resume |> select(team, wab)

  data <- list(kp, torvik, net, em, hals, wab) |>
    reduce(left_join, by = 'team') |>
    filter(!is.na(team)) |>
    mutate(consensus_avg = mean(c_across(c(kp_rk, torvik_rk, net_rk, em_rk, hals_rk)), na.rm = TRUE),
           .by = team) |>
    mutate(consensus_rk = dense_rank(consensus_avg))

  return(data)

}

rankings <- get_rankings('https://evanmiya.com/session/0a68da47b22c4b8c972296a65510d3f9/dataobj/team_ratings_page-team_ratings', '732113d474bffc90') |>
  left_join(results |> select(team, cumulative_probability, wins, wins_at_least), by = 'team') |>
  filter(wins == wins_at_least) |>
  select(team, record, kp_rk, torvik_rk, em_rk, hals_rk, net_rk, q1_record, wab, rai = cumulative_probability,
         consensus_rk, consensus_avg)

# last week rankings for change
last_week <- tibble(
  team = c('Houston', 'Arizona', 'Purdue', 'Creighton', 'Connecticut', 'Marquette', 'BYU',
           'Tennessee', 'Baylor', 'Kansas', 'Alabama', 'Auburn', 'Iowa St.',
           'Florida Atlantic', 'Illinois', 'Gonzaga', 'Duke', 'Oklahoma',
           'Wisconsin', 'North Carolina', 'Clemson', 'Texas A&M', 'Colorado',
           'Kentucky', 'Mississippi'),
  last_rk = c(1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
              14, 15, 16, 17, 18, 18, 18, 19, 20, 21, 22)
)

rankings |>
  slice_min(consensus_rk, n = 25) |>
  left_join(ap_top_25 |> mutate(ap_rank = as.character(ap_rank)), by = 'team') |>
  left_join(last_week, by = 'team') |>
  cbd_gt_logos(team, 'team') |>
  mutate(team = glue('{team} ({record})'),
         ap_rank = replace_na(ap_rank, '---'),
         rank_change = last_rk - consensus_rk) |>
  gt(id='table') |>
  gt_theme_538() |>
  opt_row_striping() |>
  fmt_markdown(team) |>
  fmt_number(c(consensus_avg, wab), decimals = 1) |>
  fmt_percent(rai, decimals = 1) |>
  gt_fa_rank_change(rank_change, font_color = "match") |>
  cols_hide(c(record, last_rk)) |>
  cols_move_to_start(consensus_rk) |>
  cols_move(ap_rank, after = net_rk) |>
  cols_align(columns = everything(), 'center') |>
  cols_align(columns = team, 'left') |>
  gt_color_rows(columns = c(kp_rk, torvik_rk, net_rk, em_rk, hals_rk), domain = 1:50,
                direction = -1, palette = 'PNWColors::Shuksan2') |>
  gt_color_rows(columns = consensus_avg, domain = 1:50,
                direction = -1, palette = 'PNWColors::Shuksan2') |>
  gt_add_divider(team, color = 'black', include_labels = FALSE) |>
  gt_add_divider(net_rk, color = 'black', include_labels = FALSE) |>
  gt_add_divider(rai, color = 'black', include_labels = FALSE) |>
  tab_spanner(columns = c(kp_rk, torvik_rk, em_rk, hals_rk, net_rk), label = 'Efficiency Rankings') |>
  tab_spanner(columns = c(ap_rank, q1_record, wab, rai), label = 'Resume Metrics') |>
  tab_style(locations = cells_body(columns = team), style = cell_text(weight = 'bold')) |>
  cols_label(
    kp_rk = 'KP',
    torvik_rk = 'Torvik',
    em_rk = 'EM',
    hals_rk = 'Hasl.',
    net_rk = 'NET',
    ap_rank = 'AP',
    q1_record = 'vs. Q1',
    wab = 'WAB',
    consensus_avg = 'Avg.',
    consensus_rk = 'Rk.',
    rank_change = 'Last'
  ) |>
  cols_width(
    team ~ px(200),
    rank_change ~ px(40),
    consensus_rk ~ px(40),
    c(everything(), -team, -rank_change, -consensus_rk) ~ px(60)
  ) |>
  tab_footnote(locations = cells_column_labels(columns = wab),
               footnote = 'Wins above bubble expectation (WAB)') |>
  tab_footnote(locations = cells_column_labels(columns = rai),
               footnote = 'Record Achievement Index: The probability that the avg. top 50 team wins as many or more games vs. same schedule') |>
  tab_options(
    footnotes.padding = 0.8,
    heading.title.font.size = 24,
    heading.subtitle.font.size = 16,
    source_notes.font.size = 15
  ) |>
  tab_header(
    title = 'College Basketball Metric Composite Rankings: Week 8 (Dec. 18)',
    subtitle = 'Composite average strictly considers efficiency rankings (KenPom, Barttorvik, Evan Miya, Haslametrics, and NET).'
  ) |>
  tab_source_note(
    source_note = 'Viz. by @andreweatherman'
  ) |>
  opt_css(
    css = "
      #table .gt_heading {
       padding-bottom: 0px;
       padding-top: 6px
      }
      #table .gt_subtitle {
       padding-top: 2px;
       padding-bottom: 6px;
      }
      #table .gt_footnote {
        line-height: 1.2;
      }
      #table .gt_sourcenote {
        line-height: 1.2;
        padding-top: 10px;
      }
     "
  ) |>
  gtsave_extra('composite_rankings_1218.png')


magick::image_read('composite_rankings_1218.png') %>%
  magick::image_trim() %>%
  magick::image_border("white", "40x40") %>%
  magick::image_write('composite_rankings_1218.png')



